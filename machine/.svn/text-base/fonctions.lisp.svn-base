;; Fonctions de gestion de la machine virtuelle.


;; ********** Gestion des attributs de la machine.

(defun get-prop (mv prop)
  (get mv prop)
  )

(defun set-prop (mv prop val)
  (setf (get mv prop) val)
  )

(defun print-prop (mv prop)
  (print (get mv prop))
  )

(defun inc-prop (mv prop)
  (setf (get mv prop) (+ (get mv prop) 1))
  )

(defun dec-prop (mv prop)
  (setf (get mv prop) (- (get mv prop) 1))
  )

(defun set-tab (tab cle val)
  (setf (aref tab cle) val)
  )


;; ********** Gestion de la mémoire et des registres de la machine.

(defun get-mem (mv adr)
  (aref (get mv 'mem) adr)
  )

(defun set-mem (mv adr val)
  (set-tab (get mv 'mem) adr val)
  )

(defun print-mem (mv adr)
  (print (get-mem mv adr))
  )

(defun get-reg (mv reg)
  (get-prop mv reg)
  )

(defun set-reg (mv reg val)
  (set-prop mv reg val)
  )

(defun print-reg (mv reg)
  (print (get-reg mv reg))
  )


;; ********** Gestion du compteur ordinal et de la pile.

(defun get-co (mv)
  (get-prop mv 'co)
  )

(defun set-co (mv val)
  (set-prop mv 'co val)
)

(defun print-co (mv)
  (print (get-prop mv 'co))
  )

(defun inc-co (mv)
  (inc-prop mv 'co)
  )

(defun dec-co (mv)
  (dec-prop mv 'co)
  )

(defun get-sp (mv)
  (get-prop mv 'sp)
  )

(defun set-sp (mv val)
  (set-prop mv 'sp val)
)

(defun print-sp (mv)
  (print (get-prop mv 'sp))
  )

(defun inc-sp (mv)
  (inc-prop mv 'sp)
  )

(defun dec-sp (mv)
  (dec-prop mv 'sp)
  )


;; ********** Gestion des instructions en mémoire.

(defun get-inst (mv)
  (get-mem mv (get-co mv))
  )

(defun get-mnem (inst)
  (car inst)
  )

(defun get-params (inst)
  (cdr inst)
  )

(defun get-param (inst)
  (cadr inst)
  )

(defun get-param-bis (inst)
  (caddr inst)
  )

(defun exec-inst (mv &optional (inst (get-inst mv)))
  (let ((p1 (get-param inst))
	(p2 (get-param-bis inst)))
    (case (get-mnem inst)
      ('LOAD (mv-load mv p1 p2))
      ('STORE (mv-store mv p1 p2))
      ('PUSH (mv-push mv p1))
      ('POP (mv-pop mv p1))
      ('ADD (mv-add mv p1 p2))
      ('SUB (mv-sub mv p1 p2))
      ('MULT (mv-mult mv p1 p2))
      ('DIV (mv-div mv p1 p2))
      ('ADDI (mv-addi mv p1 p2))
      ('SUBI (mv-subi mv p1 p2))
      ('MULTI (mv-multi mv p1 p2))
      ('DIVI (mv-divi mv p1 p2))
      ('INC (mv-inc mv p1))
      ('DEC (mv-dec mv p1))
      ('HALT (mv-halt mv))
      ('EXIT (mv-exit mv))
      ('START (mv-start mv))
      ('PRINT (mv-print mv (get-params inst)))
      ('ERROR (mv-error mv))
      (otherwise (mv-error mv))
      )
    )
  )


;; ********** Etat de la machine : lancée ou éteinte.

(defun mv-run (mv)
  (set-prop mv 'run 1)
  )

(defun mv-stop (mv)
  (set-prop mv 'run 0)
  )

(defun mv-running (mv)
  (eql (get-prop mv 'run) 1)
  )

(defun print-running (mv)
  (if (mv-running mv) 
      (print (list mv " est lancée."))
    (print (list mv " est arrêtée."))
    )
  )


;; ********** Etat de la machine : contenus mémoire et pile.

(defun aff-zone (mv ind fin)
  (if (< ind fin)
      (progn (print (get-mem mv ind))
	     (aff-zone mv (+ ind 1) fin))
    )
  )

(defun aff-globals (mv)
  (aff-zone mv 0 (get-prop mv 'bp))
  )

(defun aff-pile (mv)
  (aff-zone mv (get-prop mv 'bp) (get-sp mv))
  )

(defun aff-mem (mv)
  (aff-zone mv (/ (get-prop mv 'tmem) 2) (get-prop mv 'tmem))
  )